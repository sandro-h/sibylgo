version: 2
workflows:
  version: 2
  all:
    jobs:
      - build
      - build-vs-ext
      - hold-for-release:
          type: approval
          requires:
            - build
            - build-vs-ext
      - release:
          requires:
            - hold-for-release
jobs:
  build:
    working_directory: /go/src/github.com/sandro-h/sibylgo
    docker:
      - image: circleci/golang:1.14-buster

    steps:
      - checkout

      ##############################
      # Test and build sibylgo
      ##############################
      - restore_cache:
          name: Restore dependency cache
          keys:
            - v2-deps-{{ checksum "go.mod" }}

      - run:
          name: Install golint
          command: go get golang.org/x/lint/golint

      - run:
          name: Test
          command: make test-go

      - run:
          name: Build
          command: BUILD_NUM=$CIRCLE_BUILD_NUM GIT_SHA=${CIRCLE_SHA1:0:7} make build-go

      - save_cache:
          name: Save dependency cache
          paths:
            - /go/pkg/mod
          key: v2-deps-{{ checksum "go.mod" }}

      - run:
          # Print it here because the ghr image to publish to github is so minimal it can't run the executable.
          name: Print final version
          command: ./sibylgo --version > final_version.txt

      - run:
          name: Lint
          command: ./lint.sh

      - store_artifacts:
          path: sibylgo
          destination: binaries/sibylgo
      - store_artifacts:
          path: sibylgo.exe
          destination: binaries/sibylgo.exe
      - store_artifacts:
          path: sibylcal.html
          destination: binaries/sibylcal.html
      - store_artifacts:
          path: lint_report.txt
          destination: reports/lint_report.txt

      - persist_to_workspace:
          root: .
          paths:
            - sibylgo
            - sibylgo.exe
            - sibylcal.html
            - final_version.txt

      ##############################
      # Sonar
      ##############################

    # Excluded because sonarcloud doesn't support free private github repos.
    #   - restore_cache:
    #       name: Restore buildtools cache
    #       key: v1-buildtools

    #   - run:
    #       name: Fetch sonar scanner
    #       command: |
    #         if [ ! -d buildtools/sonar-scanner ]; then
    #           wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
    #           unzip -d buildtools/ sonar-scanner-cli-3.2.0.1227-linux.zip
    #           mv buildtools/sonar-scanner-3.2.0.1227-linux buildtools/sonar-scanner
    #         fi

    #   - save_cache:
    #       name: Save buildtools cache
    #       paths:
    #         - buildtools
    #       key: v1-buildtools

    #   - run:
    #       name: Run sonar analysis
    #       command: |
    #         buildtools/sonar-scanner/bin/sonar-scanner \
    #           -Dsonar.host.url=https://sonarcloud.io \
    #           -Dsonar.login=$SONAR_TOKEN

  build-vs-ext:
    docker:
      - image: circleci/node:10.15

    steps:
      - checkout

      - restore_cache:
          name: Restore node_modules cache
          key: v1-node_modules-{{ checksum "vscode_ext/package.json" }}

      - run:
          name: Install
          command: "[ -d vscode_ext/node_modules ] || make deps-vscode"

      - save_cache:
          name: Save node_modules cache
          paths:
            - vscode_ext/node_modules
          key: v1-node_modules-{{ checksum "vscode_ext/package.json" }}

      - run:
          name: Build
          command: make build-vscode

      - store_artifacts:
          path: vscode_ext/sibyl.vsix
          destination: sibyl.vsix

      - persist_to_workspace:
          root: vscode_ext
          paths:
            - sibyl.vsix

  release:
    docker:
      - image: cibuilds/github:0.12
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(cat ./artifacts/final_version.txt)
            rm -f ./artifacts/final_version.txt
            ghr -t ${GITHUB_RELEASE_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "Version ${VERSION}" ${VERSION} ./artifacts/